import logging
import aiohttp
import ssl
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
import asyncio
from typing import Optional
import re
import os
from aiogram.client.default import DefaultBotProperties
from aiohttp import web



async def run_http_server():
    app = web.Application()

    async def handle(request):
        return web.Response(text="Bot is running!")

    async def health_check(request):
        return web.json_response({"status": "ok", "service": "yml-checker-bot"})

    app.router.add_get('/', handle)
    app.router.add_get('/health', health_check)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=8080)
    await site.start()
    print("HTTP server started on port 8080")


API_TOKEN = os.getenv("API_TOKEN", "8374508374:AAGFkSRbZpTJ53QeS5wbpZVLzxOqvQ3BcR4")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

YML_PATHS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    "/yandex.xml",
    "/yml.xml",
    "/market.yml",
    "/yandex-market.xml",
    "/export/yml.xml",
    "/market.xml",
    "/yandex.yml",
    "/export.xml",

    # 1–°-–ë–∏—Ç—Ä–∏–∫—Å
    "/bitrix/catalog_export/yandex.php",
    "/bitrix/catalog_export/yandex_run.php",
    "/bitrix/catalog_export/ym.php",
    "/bitrix/components/bitrix/catalog.export/.default/export.php",
    "/bitrix/catalog_export/export_BKi.xml",

    # InSales
    "/market.yml",

    # Ecwid
    "/market.xml",

    # CS-Cart
    "/yml.php",

    # OpenCart
    "/index.php?dispatch=yml.export",
    "/index.php?route=feed/yandex_market",
    "/index.php?route=extension/feed/yandex",

    # PrestaShop
    "/modules/yamarket/yml.xml",
    "/modules/yamarket/export.yml",
    "/modules/ymlfeed/export.xml",
    "/modules/yml/yandex_market.xml",

    # WooCommerce (WordPress)
    "/wp-content/uploads/yml/yandex.xml",
    "/wp-content/uploads/woo-yml.xml",
    "/wp-content/plugins/yml-for-yandex/export.xml",
    "/wp-content/uploads/feed-yml-0.xml",
    "/wp-content/uploads/feed-yml-1.xml",
    "/wp-content/uploads/feed-yml-2.xml",
    "/wp-content/uploads/feed-yml-3.xml",
    "/wp-content/uploads/feed-yml-4.xml",
    "/wp-content/uploads/feed-yml-5.xml",
    "/wp-content/uploads/feed-yml-6.xml",
    "/wp-content/uploads/feed-yml-7.xml",
    "/wp-content/uploads/feed-yml-8.xml",
    "/wp-content/uploads/feed-yml-9.xml",

    # Shopify
    "/apps/yandex/export.yml",

    # RetailCRM / –ú–æ–π–°–∫–ª–∞–¥
    "/export/yandex.yml",
    "/exchange/yandex_market.xml",

    # UMI.CMS
    "/yandex-market.xml",
    "/umi-yml.xml",

    # –î—Ä—É–≥–∏–µ CMS –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    "/var/yml/yandex_market.xml",
    "/export/yml.php",
    "/feeds/yml.xml",
    "/yandex_market.xml",
    "/files/export/yandex.xml",
    "/upload/iblock/export/yandex.xml",
    "/upload/yandex.xml",
    "/catalog/export/yandex",
    "/api/yandex-market",
    "/data/feed/yandex.xml",
    "/feeds/yandex.xml",
    "/xml/yandex.xml",

    # Wildberries –∏ Ozon
    "/seller-feed.xml",
    "/wb-feed.xml",
    "/ozon-feed.xml",
    "/market.yaml",
]

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Accept": "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,*/*;q=0.5",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "Connection": "keep-alive",
}

ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE


def clean_url(url: str) -> str:
    url = url.strip()
    url = re.sub(r'^https?://', '', url)
    url = url.rstrip('/')
    return url


def is_yml_catalog(text: str) -> bool:
    text_clean = ' '.join(text.strip().split()).lower()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ YML-–∫–∞—Ç–∞–ª–æ–≥–∞
    required_indicators = [
        "<yml_catalog",
        "<shop>",
        "<offers>",
        "<offer id=",
        "<category id=",
        "<currency id="
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    secondary_indicators = [
        "yandex-market",
        "yandex.market",
        "</offer>",
        "</category>",
        "<price>",
        "<url>",
        "<picture>"
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–æ–≤–∞ "Yandex" –≤ –ø–µ—Ä–≤—ã—Ö 7 —Å—Ç—Ä–æ—á–∫–∞—Ö
    first_lines = text.split('\n')[:7]
    has_yandex_in_first_lines = any('yandex' in line.lower() for line in first_lines)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    has_required = all(indicator in text_clean for indicator in required_indicators[:3])  

    if has_required:
        has_secondary = any(indicator in text_clean for indicator in secondary_indicators)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ò (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ò–õ–ò Yandex –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö)
        return has_secondary or has_yandex_in_first_lines

    return False


def is_valid_yml_content(text: str) -> bool:
    """
    –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ YML
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not is_yml_catalog(text):
        return False

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    text_lower = text.lower()

    if '<offers>' in text_lower and '</offers>' in text_lower:
        offers_start = text_lower.find('<offers>') + len('<offers>')
        offers_end = text_lower.find('</offers>')
        offers_content = text_lower[offers_start:offers_end].strip()

        if not offers_content or '<offer' not in offers_content:
            return False

    if '<categories>' in text_lower and '</categories>' in text_lower:
        categories_start = text_lower.find('<categories>') + len('<categories>')
        categories_end = text_lower.find('</categories>')
        categories_content = text_lower[categories_start:categories_end].strip()

        if not categories_content or '<category' not in categories_content:
            return False

    return True


async def check_yml(site: str) -> Optional[str]:
    schemes = ["https://", "http://"]
    connector = aiohttp.TCPConnector(ssl=ssl_context, limit=20)

    async with aiohttp.ClientSession(
            headers=HEADERS,
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=15)
    ) as session:

        clean_site = clean_url(site)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è InSales
        if ".myinsales.ru" not in clean_site and "insales" not in clean_site:
            insales_url = f"https://{clean_site}.myinsales.ru/market.yml"
            try:
                async with session.get(insales_url, allow_redirects=True) as resp:
                    if resp.status == 200:
                        content_type = resp.headers.get('Content-Type', '').lower()
                        if any(x in content_type for x in
                               ['xml', 'text', 'application/xml', 'text/xml', 'application/yaml']):
                            text = await resp.text()
                            if is_valid_yml_content(text):
                                return insales_url
            except:
                pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Ecwid
        if ".ecwid.com" not in clean_site and "ecwid" not in clean_site:
            ecwid_url = f"https://{clean_site}.ecwid.com/market.xml"
            try:
                async with session.get(ecwid_url, allow_redirects=True) as resp:
                    if resp.status == 200:
                        content_type = resp.headers.get('Content-Type', '').lower()
                        if any(x in content_type for x in ['xml', 'text', 'application/xml', 'text/xml']):
                            text = await resp.text()
                            if is_valid_yml_content(text):
                                return ecwid_url
            except:
                pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
        for scheme in schemes:
            for path in YML_PATHS:
                url = f"{scheme}{clean_site}{path}"

                try:
                    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º: {url}")

                    async with session.get(url, allow_redirects=True) as resp:
                        if resp.status == 200:
                            content_type = resp.headers.get('Content-Type', '').lower()

                            if any(x in content_type for x in
                                   ['xml', 'text', 'application/xml', 'text/xml', 'application/yaml', 'text/yaml']):
                                text = await resp.text()

                                # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ YML
                                if is_valid_yml_content(text):
                                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π YML: {url}")
                                    return url
                                else:
                                    logging.info(f"‚ùå –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è YML: {url}")

                except aiohttp.ClientConnectorError:
                    continue
                except aiohttp.ServerTimeoutError:
                    continue
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
                    continue

    return None


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: wildberries.ru), –∏ —è –ø—Ä–æ–≤–µ—Ä—é YML –∫–∞—Ç–∞–ª–æ–≥.")


@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = """
üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: wildberries.ru)
2. –Ø –ø—Ä–æ–≤–µ—Ä—é –±–æ–ª–µ–µ 50 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—É—Ç–µ–π –∫ YML-–∫–∞—Ç–∞–ª–æ–≥–∞–º
3. –ï—Å–ª–∏ –Ω–∞–π–¥—É –Ω–∞—Å—Ç–æ—è—â–∏–π YML - –ø–æ–∫–∞–∂—É –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
4. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—É - –ø–æ–∫–∞–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏

üí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
- `wildberries.ru`
- `ozon.ru`
- `example.com`

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö CMS:
- 1–°-–ë–∏—Ç—Ä–∏–∫—Å, InSales, Ecwid
- WooCommerce, Shopify
- OpenCart, PrestaShop, CS-Cart
- –ò –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö
    """
    await message.answer(help_text)


@dp.message(Command("check"))
async def check_command(message: Message):
    await message.answer("üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: wildberries.ru)")


@dp.message(Command("about"))
async def about_command(message: Message):
    about_text = """
ü§ñ –û –±–æ—Ç–µ

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ YML-–∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö. YML (Yandex Market Language) - —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã.

üìä –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–æ–ª–µ–µ 50 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—É—Ç–µ–π –∫ YML-–∫–∞—Ç–∞–ª–æ–≥–∞–º
- –†–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ CMS –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
- –ù–∞—Ö–æ–¥–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞, Wildberries, Ozon
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞
- –û—Ç–ª–∏—á–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ YML-–∫–∞—Ç–∞–ª–æ–≥–∏ –æ—Ç –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤

‚ö° –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ!
    """
    await message.answer(about_text)


@dp.message()
async def get_yml(message: Message):
    if message.text.startswith('/'):
        return

    site = message.text.strip()
    await message.answer(f"üîé –ü—Ä–æ–≤–µ—Ä—è—é {site}...")

    result_url = await check_yml(site)

    if result_url:
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω YML-–∫–∞—Ç–∞–ª–æ–≥:\n{result_url}")
    else:
        await message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ YML-–∫–∞—Ç–∞–ª–æ–≥")


async def main():
    try:
        asyncio.create_task(run_http_server())
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot error: {e}")


if __name__ == "__main__":
    asyncio.run(main())
