import logging
import aiohttp
import ssl
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
import asyncio
from typing import Optional
import re
import os

API_TOKEN = os.getenv('BOT_TOKEN', "8374508374:AAGFkSRbZpTJ53QeS5wbpZVLzxOqvQ3BcR4")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

YML_PATHS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
    "/yandex.xml",
    "/yml.xml",
    "/market.yml",
    "/yandex-market.xml",
    "/export/yml.xml",

    # Wildberries –∏ –¥—Ä—É–≥–∏–µ –∫—Ä—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
    "/seller-feed.xml",
    "/wb-feed.xml",
    "/ozon-feed.xml",
    "/market.yaml",

    # Bitrix
    "/bitrix/catalog_export/yandex.php",
    "/bitrix/components/bitrix/catalog.export/.default/export.php",

    # WordPress
    "/wp-content/uploads/yml/yandex.xml",
    "/wp-content/uploads/feed-yml-0.xml",
    "/wp-content/uploads/feed-yml-1.xml",
    "/wp-content/uploads/feed-yml-2.xml",
    "/wp-content/uploads/feed-yml-3.xml",
    "/wp-content/uploads/feed-yml-4.xml",
    "/wp-content/uploads/feed-yml-5.xml",
    "/wp-content/uploads/feed-yml-6.xml",
    "/wp-content/uploads/feed-yml-7.xml",
    "/wp-content/uploads/feed-yml-8.xml",
    "/wp-content/uploads/feed-yml-9.xml",

    # –î—Ä—É–≥–∏–µ CMS
    "/yml.php",
    "/modules/yamarket/export.yml",
    "/index.php?route=feed/yandex_market",
    "/apps/yandex/export.yml",
    "/export/yandex.yml",
    "/exchange/yandex_market.xml",

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    "/upload/iblock/export/yandex.xml",
    "/upload/yandex.xml",
    "/catalog/export/yandex",
    "/api/yandex-market",
    "/data/feed/yandex.xml",
    "/feeds/yandex.xml",
    "/xml/yandex.xml",
]

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Accept": "text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,*/*;q=0.5",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "Connection": "keep-alive",
}

ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE


def clean_url(url: str) -> str:
    """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    url = url.strip()
    url = re.sub(r'^https?://', '', url)
    url = url.rstrip('/')
    return url


def is_yml_catalog(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç YML-–∫–∞—Ç–∞–ª–æ–≥–æ–º"""
    text_lower = text.lower()

    yml_indicators = [
        "<yml_catalog",
        "yandex-market",
        "yandex.market",
        "market.yml",
        "—è–Ω–¥–µ–∫—Å.–º–∞—Ä–∫–µ—Ç",
        "offer id=",
        "currency id=",
        "category id=",
        "<shop>",
        "<offers>",
        "<categories>"
    ]

    main_indicators = ["<yml_catalog", "yandex-market", "yandex.market"]

    has_main_indicator = any(indicator in text_lower for indicator in main_indicators)
    has_any_indicator = any(indicator in text_lower for indicator in yml_indicators)
    is_xml_like = text.strip().startswith('<?xml') or '<' in text and '>' in text

    return has_main_indicator or (has_any_indicator and is_xml_like)


async def check_yml(site: str) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—É—Ç–∏ YML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –≥–ª–∞–≤–Ω—É—é"""
    schemes = ["https://", "http://"]
    connector = aiohttp.TCPConnector(ssl=ssl_context, limit=20)

    async with aiohttp.ClientSession(
            headers=HEADERS,
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=15)
    ) as session:

        clean_site = clean_url(site)

        for scheme in schemes:
            for path in YML_PATHS:
                url = f"{scheme}{clean_site}{path}"

                try:
                    async with session.get(url, allow_redirects=True) as resp:
                        if resp.status == 200:
                            content_type = resp.headers.get('Content-Type', '').lower()
                            if any(x in content_type for x in ['xml', 'text', 'application/xml', 'text/xml']):
                                text = await resp.text()
                                if is_yml_catalog(text):
                                    return url

                except Exception:
                    continue

        # –ï—Å–ª–∏ YML –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        for scheme in schemes:
            main_url = f"{scheme}{clean_site}"
            try:
                async with session.get(main_url, timeout=5) as resp:
                    if resp.status == 200:
                        return main_url
            except:
                continue

    return None


@dp.message(CommandStart())
async def start(message: Message):
    welcome_text = """
    ü§ñ <b>YML Validator Bot</b>

    –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ YML-–∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ!

    üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
    /check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç
    /help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    /about - –û –±–æ—Ç–µ

    üöÄ <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞!</b>
    """
    await message.answer(welcome_text, parse_mode='HTML')


@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = """
    üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>

    1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com)
    2. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –±–æ–ª–µ–µ 50 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ YML-–∫–∞—Ç–∞–ª–æ–≥–∞–º
    3. –ï—Å–ª–∏ –Ω–∞–π–¥–µ—Ç - –≤–µ—Ä–Ω–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
    4. –ï—Å–ª–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    üîç <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ CMS:</b>
    ‚Ä¢ 1–°-–ë–∏—Ç—Ä–∏–∫—Å
    ‚Ä¢ WordPress + WooCommerce
    ‚Ä¢ OpenCart
    ‚Ä¢ CS-Cart
    ‚Ä¢ PrestaShop
    ‚Ä¢ InSales
    ‚Ä¢ Ecwid

    üí° <b>–°–æ–≤–µ—Ç:</b> –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∞–π—Ç—ã –±–µ–∑ http/https
    """
    await message.answer(help_text, parse_mode='HTML')


@dp.message(Command("about"))
async def about_command(message: Message):
    about_text = """
    ‚ÑπÔ∏è <b>–û YML Validator Bot</b>

    –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ YML-–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–∞–π—Ç–∞—Ö.

    <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ 50+ –ø—É—Ç–µ–π –∫ YML-–∫–∞—Ç–∞–ª–æ–≥–∞–º
    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö CMS
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
    ‚Ä¢ Python 3.11+
    ‚Ä¢ Aiogram 3.x
    ‚Ä¢ AsyncIO –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    await message.answer(about_text, parse_mode='HTML')


@dp.message(Command("check"))
async def check_command(message: Message):
    await message.answer("üîç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com)")


@dp.message(F.text & ~F.text.startswith('/'))
async def handle_website(message: Message):
    site = message.text.strip()

    await message.answer(f"üîé –ü—Ä–æ–≤–µ—Ä—è—é {site}...")

    result_url = await check_yml(site)

    if result_url:
        await message.answer(f"‚úÖ <b>–ù–∞–π–¥–µ–Ω YML –∫–∞—Ç–∞–ª–æ–≥:</b>\n<code>{result_url}</code>", parse_mode='HTML')
    else:
        await message.answer("‚ùå YML –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        types.BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç"),
        types.BotCommand(command="about", description="–û –±–æ—Ç–µ")
    ]
    await bot.set_my_commands(commands)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    await set_bot_commands()
    await bot.set_my_description("ü§ñ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ YML-–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å–∞–π—Ç–∞—Ö")

    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)


if __name__ == "__main__":
    asyncio.run(main())